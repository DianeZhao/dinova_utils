#!/usr/bin/env python3
from typing import Union, Dict, List
import rospy
import sys
from std_msgs.msg import String
from geometry_msgs.msg import PoseStamped
from shape_msgs.msg import SolidPrimitive
from derived_object_msgs.msg import Object, ObjectArray


from enum import Enum

class LogMode(Enum):
    TOPIC = "topic"
    LOGINFO = "loginfo"
    LOGWARN = "logwarn"
    TERMINAL = "terminal"

class Logger():
    _name: str
    _mode: LogMode
    _rate: rospy.Rate

    def __init__(self, name: str, mode: LogMode = LogMode.TERMINAL):
        self._name = name
        self._mode = mode
        self._topic_name = self._name + "/log"

        rospy.init_node(self._name)
        self._rate = rospy.Rate(10)
        self._debug_publisher = rospy.Publisher(
            self._topic_name,
            String,
            queue_size=10
        )


    def log(self, message: str, mode: Union[None, LogMode] = None):
        log_mode = mode if mode else self._mode
        if log_mode == LogMode.TERMINAL:
            print(f"{self._name}: {message}")
        elif log_mode == LogMode.TOPIC:
            try:
                self._debug_publisher.publish(String(data=message))
            except AttributeError as e:
                rospy.logwarn(f"Message cannot be published as topic due to {e}")
        elif log_mode == LogMode.LOGINFO:
            rospy.loginfo(f"{self._name}: {message}")




class DefaultNode():

    _name: str
    _logger: Logger
    _rate: rospy.Rate
    _subscribers: Dict[str, rospy.Subscriber]
    _object_poses: Dict[str, PoseStamped]
    _object_radius: float = 0.10
    
    def __init__(self, robot_name: str, object_names: List[str]):
        self._name = 'object_bundle'
        self.robot_name = robot_name
        #remove the ego-robot and grasp goal as collision obstacles:
        if robot_name in object_names:
            object_names.remove(robot_name)
        if "mug1" in object_names:
            object_names.remove("mug1")
        if "cup1" in object_names:
            object_names.remove("cup1")
        if "wineglass" in object_names:
            object_names.remove("wineglass")
        self._logger = Logger(self._name, mode=LogMode.LOGINFO)
        rospy.init_node(self._name)
        self._rate = rospy.Rate(10)
        self._object_poses = {}
        self.establish_ros_connections(object_names)

    def establish_ros_connections(self, object_names: List[str]):
        self._subscribers = {}
        for object_name in object_names:
            topic_name = f"/vicon/{object_name}"
            self._subscribers[topic_name] = rospy.Subscriber(
                topic_name,
                PoseStamped,
                self.object_callback,
                callback_args=object_name,
            )
        self._object_publisher = rospy.Publisher(self.robot_name+"/objects", ObjectArray, queue_size=1)

    def object_callback(self, data: PoseStamped, object_name: str):
        self._object_poses[object_name] = data

    def publish_objects(self):
        object_array = ObjectArray()
        object_array.header.stamp = rospy.Time.now()
        for object_name, pose in enumerate(self._object_poses.values()):
            obj = Object()
            obj.header = object_array.header
            obj.id = object_name
            obj.pose = pose.pose
            obj.shape = SolidPrimitive(type=SolidPrimitive.SPHERE, dimensions=[self._object_radius])
            object_array.objects.append(obj)
        self._object_publisher.publish(object_array)

    def run(self):
        while not rospy.is_shutdown():
            """
            if 'mug1' in self._object_poses:
                self._logger.log(str(self._object_poses['mug1']))
            """

            self.publish_objects()
            self._rate.sleep()

if __name__ == "__main__":
    if len(sys.argv)>1:
        robot_name = sys.argv[1]
    else:
        print("please specify robot name as an argument, e.g.: dingo1, dingo2")
    object_names = rospy.get_param(robot_name+"/vicon/object_specific/object_names")
    node = DefaultNode(robot_name, object_names)
    try:
        node.run()
    except rospy.ROSInterruptException:
        pass
